<!DOCTYPE html>

<!--
		Generated using Markdown to HTML Converter by Chris Pyles.
		More at https://github.com/chrispyles/markdown-to-html
-->

<html>
<head>
	<title>page title</title>
	<meta name="description" content="page description">
	<meta name="author" content="page author">
	<!-- <link href="https://fonts.googleapis.com/css?family=Roboto:400,400i,700&display=swap" rel="stylesheet"> -->

	<!-- Boostrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

    
	<style type="text/css">

		/* CSS for MD to HTML Converter
			by Chris Pyles

    	body {
    		margin-top: -27px;
    		margin-left: 0;
    		background-color: #00b0da;
    	}

		h1, h2, h3, h4, h5, h6 {
			font-family: '=', sans-serif;
			font-weight: 600;
		}

		h1, h2 {
			letter-spacing: 1px;
		}

		h1 {
			font-size: 30pt;
		}

		h2 {
			font-size: 20pt;
		}

		h3 {
			font-size: 14pt;
		}

		p, ul, th, td, ol {
			font-family: '=', sans-serif;
			font-size: 12pt;
		}

		p#header {
			color: white;
			padding-left: 235px;
		}

		ul.nav {
			list-style-type: none;
			padding-left: 15px;
		}

		li.nav {
			padding-left: 20px;
			width: 230px;
		}

		li.nav:hover {
			background-color: rgba(256, 256, 256, 0.5);
		}

		th, td {
			border-top: 1px solid black;
			border-left: 1px solid black;
			text-align: center;
			padding: 5px 2px;
		}

		th {
			font-weight: 600;
		}

		div {
			width: 800px;
			margin: 0 0 0 255px;
			background-color: white;
			padding: 0 20px;
			margin-top: -27px;
		}

		div#top {
			background-color: #46535e;
			margin-top: 27px;
			width: 100%;
			height: 52px;
			margin-left: 0;
			position: fixed;
			z-index: 1;
		}

		div#body {
			position: absolute;
			margin-top: 60px;
			overflow: scroll;
		}

		table {
			width: 75%;
			margin: 0 auto;
			border-right: 1px solid black;
			border-bottom: 1px solid black;
			border-spacing: 0;
			table-layout: fixed;
		}

		table#header {
			width: 100%;
		    height: auto;
		    border: none;
		}

		p.code {
			width: 95%;
			margin: 10px auto;
			padding: 10px;
			background-color: rgba(222, 222, 222, 0.5);
		}

		nav {
			position: fixed;
			width: 250px;
			padding-left: 5px;
			height: 100%;
			background-color: #46535e;
			color: white;
			margin-top: 36px;
			padding-top: 6px;
			z-index: 2;
		}

		a.nav:link, a.nav:hover, a.nav:visited, a.nav:active {
			color: white;
		}

		*/

		/* Resize div for Pygments. */
		div.highlight {
			font-size: 12pt;
			width: 98%;
			margin: 10px auto;
			padding: 10px;
			background-color: #1d1e19;
			color: #f6f7ee !important;
			overflow: scroll;
			border-radius: 5px;
		}

		pre {
			margin: 0;
			color: #f6f7ee !important;
		}

		.p {
			color: #f6f7ee !important;
		}

		/* Below is imported the style from Pygments. */

		pre { line-height: 125%; }
td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.hll { background-color: #ffffcc }
.c { color: #fd8700; font-style: italic } /* Comment */
.g { color: #fd8700 } /* Generic */
.k { color: #53d1ed; font-weight: bold } /* Keyword */
.n { color: #f6f7ee } /* Name */
.o { color: #f7005f } /* Operator */
.ch { color: #fd8700; font-style: italic } /* Comment.Hashbang */
.cm { color: #fd8700; font-style: italic } /* Comment.Multiline */
.cp { color: #fd8700; font-style: italic } /* Comment.Preproc */
.cpf { color: #fd8700; font-style: italic } /* Comment.PreprocFile */
.c1 { color: #fd8700; font-style: italic } /* Comment.Single */
.cs { color: #fd8700; font-style: italic } /* Comment.Special */
.gd { color: #fd8700 } /* Generic.Deleted */
.ge { color: #fd8700 } /* Generic.Emph */
.gr { color: #fd8700 } /* Generic.Error */
.gh { color: #fd8700 } /* Generic.Heading */
.gi { color: #fd8700 } /* Generic.Inserted */
.go { color: #fd8700 } /* Generic.Output */
.gp { color: #fd8700 } /* Generic.Prompt */
.gs { color: #fd8700 } /* Generic.Strong */
.gu { color: #fd8700 } /* Generic.Subheading */
.gt { color: #fd8700 } /* Generic.Traceback */
.kc { color: #53d1ed; font-weight: bold } /* Keyword.Constant */
.kd { color: #53d1ed; font-weight: bold } /* Keyword.Declaration */
.kn { color: #53d1ed; font-weight: bold } /* Keyword.Namespace */
.kp { color: #53d1ed; font-weight: bold } /* Keyword.Pseudo */
.kr { color: #53d1ed; font-weight: bold } /* Keyword.Reserved */
.kt { color: #53d1ed; font-weight: bold } /* Keyword.Type */
.m { color: #9d60ff } /* Literal.Number */
.s { color: #e0d75a } /* Literal.String */
.na { color: #f6f7ee } /* Name.Attribute */
.nb { color: #f6f7ee } /* Name.Builtin */
.nc { color: #53d1ed; font-weight: bold } /* Name.Class */
.no { color: #f6f7ee } /* Name.Constant */
.nd { color: #f6f7ee } /* Name.Decorator */
.ni { color: #f6f7ee } /* Name.Entity */
.ne { color: #f6f7ee } /* Name.Exception */
.nf { color: #96e309 } /* Name.Function */
.nl { color: #f6f7ee } /* Name.Label */
.nn { color: #f6f7ee } /* Name.Namespace */
.nx { color: #f6f7ee } /* Name.Other */
.py { color: #f6f7ee } /* Name.Property */
.nt { color: #f6f7ee } /* Name.Tag */
.nv { color: #f6f7ee } /* Name.Variable */
.ow { color: #f7005f } /* Operator.Word */
.mb { color: #9d60ff } /* Literal.Number.Bin */
.mf { color: #9d60ff } /* Literal.Number.Float */
.mh { color: #9d60ff } /* Literal.Number.Hex */
.mi { color: #9d60ff } /* Literal.Number.Integer */
.mo { color: #9d60ff } /* Literal.Number.Oct */
.sa { color: #e0d75a } /* Literal.String.Affix */
.sb { color: #e0d75a } /* Literal.String.Backtick */
.sc { color: #e0d75a } /* Literal.String.Char */
.dl { color: #e0d75a } /* Literal.String.Delimiter */
.sd { color: #e0d75a } /* Literal.String.Doc */
.s2 { color: #e0d75a } /* Literal.String.Double */
.se { color: #e0d75a } /* Literal.String.Escape */
.sh { color: #e0d75a } /* Literal.String.Heredoc */
.si { color: #e0d75a } /* Literal.String.Interpol */
.sx { color: #e0d75a } /* Literal.String.Other */
.sr { color: #e0d75a } /* Literal.String.Regex */
.s1 { color: #e0d75a } /* Literal.String.Single */
.ss { color: #e0d75a } /* Literal.String.Symbol */
.bp { color: #f6f7ee } /* Name.Builtin.Pseudo */
.fm { color: #96e309 } /* Name.Function.Magic */
.vc { color: #f6f7ee } /* Name.Variable.Class */
.vg { color: #f6f7ee } /* Name.Variable.Global */
.vi { color: #f6f7ee } /* Name.Variable.Instance */
.vm { color: #f6f7ee } /* Name.Variable.Magic */
.il { color: #9d60ff } /* Literal.Number.Integer.Long */

	</style>
	
</head>
<body><nav class="navbar navbar-expand-md navbar-light bg-light">
	
	<a class="navbar-brand" href="#">navigation test menu title</a>
	
	<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    	<span class="navbar-toggler-icon"></span>
 	</button>

 	<div class="collapse navbar-collapse" id="navbarSupportedContent">
 		<ul class="navbar-nav ml-auto">
				<li class="nav-item active"><a class="nav-link" href="HTML file path">Test Link</a></li>
</ul></div></nav>

<div class="container" id="body">

<p><!DOCTYPE html></p>

<!--
        Generated using Markdown to HTML Converter by Chris Pyles.
        More at https://github.com/chrispyles/markdown-to-html
-->

<p><html>
<head>
    <title>page title</title>
    <meta name="description" content="page description">
    <meta name="author" content="page author">
    <!-- <link href="https://fonts.googleapis.com/css?family=Roboto:400,400i,700&amp;display=swap" rel="stylesheet"> --></p>

<pre><code>&lt;!-- Boostrap CSS --&gt;
&lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous"&gt;

&lt;script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"&gt;&lt;/script&gt;

&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"&gt;&lt;/script&gt;

&lt;script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"&gt;&lt;/script&gt;


&lt;style type="text/css"&gt;

    /* CSS for MD to HTML Converter
        by Chris Pyles

    body {
        margin-top: -27px;
        margin-left: 0;
        background-color: #00b0da;
    }

    h1, h2, h3, h4, h5, h6 {
        font-family: '=', sans-serif;
        font-weight: 600;
    }

    h1, h2 {
        letter-spacing: 1px;
    }

    h1 {
        font-size: 30pt;
    }

    h2 {
        font-size: 20pt;
    }

    h3 {
        font-size: 14pt;
    }

    p, ul, th, td, ol {
        font-family: '=', sans-serif;
        font-size: 12pt;
    }

    p#header {
        color: white;
        padding-left: 235px;
    }

    ul.nav {
        list-style-type: none;
        padding-left: 15px;
    }

    li.nav {
        padding-left: 20px;
        width: 230px;
    }

    li.nav:hover {
        background-color: rgba(256, 256, 256, 0.5);
    }

    th, td {
        border-top: 1px solid black;
        border-left: 1px solid black;
        text-align: center;
        padding: 5px 2px;
    }

    th {
        font-weight: 600;
    }

    div {
        width: 800px;
        margin: 0 0 0 255px;
        background-color: white;
        padding: 0 20px;
        margin-top: -27px;
    }

    div#top {
        background-color: #46535e;
        margin-top: 27px;
        width: 100%;
        height: 52px;
        margin-left: 0;
        position: fixed;
        z-index: 1;
    }

    div#body {
        position: absolute;
        margin-top: 60px;
        overflow: scroll;
    }

    table {
        width: 75%;
        margin: 0 auto;
        border-right: 1px solid black;
        border-bottom: 1px solid black;
        border-spacing: 0;
        table-layout: fixed;
    }

    table#header {
        width: 100%;
        height: auto;
        border: none;
    }

    p.code {
        width: 95%;
        margin: 10px auto;
        padding: 10px;
        background-color: rgba(222, 222, 222, 0.5);
    }

    nav {
        position: fixed;
        width: 250px;
        padding-left: 5px;
        height: 100%;
        background-color: #46535e;
        color: white;
        margin-top: 36px;
        padding-top: 6px;
        z-index: 2;
    }

    a.nav:link, a.nav:hover, a.nav:visited, a.nav:active {
        color: white;
    }

    */

    /* Resize div for Pygments. */
    div.highlight {
        font-size: 12pt;
        width: 98%;
        margin: 10px auto;
        padding: 10px;
        background-color: #1d1e19;
        color: #f6f7ee !important;
        overflow: scroll;
        border-radius: 5px;
    }

    pre {
        margin: 0;
        color: #f6f7ee !important;
    }

    .p {
        color: #f6f7ee !important;
    }

    /* Below is imported the style from Pygments. */

    pre { line-height: 125%; margin: 0; }
</code></pre>

<p>td.linenos pre { color: #000000; background-color: #f0f0f0; padding: 0 5px 0 5px; }
span.linenos { color: #000000; background-color: #f0f0f0; padding: 0 5px 0 5px; }
td.linenos pre.special { color: #000000; background-color: #ffffc0; padding: 0 5px 0 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding: 0 5px 0 5px; }
.hll { background-color: #ffffcc }
.c { color: #fd8700; font-style: italic } /* Comment <em>/
.g { color: #fd8700 } /</em> Generic <em>/
.k { color: #53d1ed; font-weight: bold } /</em> Keyword <em>/
.n { color: #f6f7ee } /</em> Name <em>/
.o { color: #f7005f } /</em> Operator <em>/
.ch { color: #fd8700; font-style: italic } /</em> Comment.Hashbang <em>/
.cm { color: #fd8700; font-style: italic } /</em> Comment.Multiline <em>/
.cp { color: #fd8700; font-style: italic } /</em> Comment.Preproc <em>/
.cpf { color: #fd8700; font-style: italic } /</em> Comment.PreprocFile <em>/
.c1 { color: #fd8700; font-style: italic } /</em> Comment.Single <em>/
.cs { color: #fd8700; font-style: italic } /</em> Comment.Special <em>/
.gd { color: #fd8700 } /</em> Generic.Deleted <em>/
.ge { color: #fd8700 } /</em> Generic.Emph <em>/
.gr { color: #fd8700 } /</em> Generic.Error <em>/
.gh { color: #fd8700 } /</em> Generic.Heading <em>/
.gi { color: #fd8700 } /</em> Generic.Inserted <em>/
.go { color: #fd8700 } /</em> Generic.Output <em>/
.gp { color: #fd8700 } /</em> Generic.Prompt <em>/
.gs { color: #fd8700 } /</em> Generic.Strong <em>/
.gu { color: #fd8700 } /</em> Generic.Subheading <em>/
.gt { color: #fd8700 } /</em> Generic.Traceback <em>/
.kc { color: #53d1ed; font-weight: bold } /</em> Keyword.Constant <em>/
.kd { color: #53d1ed; font-weight: bold } /</em> Keyword.Declaration <em>/
.kn { color: #53d1ed; font-weight: bold } /</em> Keyword.Namespace <em>/
.kp { color: #53d1ed; font-weight: bold } /</em> Keyword.Pseudo <em>/
.kr { color: #53d1ed; font-weight: bold } /</em> Keyword.Reserved <em>/
.kt { color: #53d1ed; font-weight: bold } /</em> Keyword.Type <em>/
.m { color: #9d60ff } /</em> Literal.Number <em>/
.s { color: #e0d75a } /</em> Literal.String <em>/
.na { color: #f6f7ee } /</em> Name.Attribute <em>/
.nb { color: #f6f7ee } /</em> Name.Builtin <em>/
.nc { color: #53d1ed; font-weight: bold } /</em> Name.Class <em>/
.no { color: #f6f7ee } /</em> Name.Constant <em>/
.nd { color: #f6f7ee } /</em> Name.Decorator <em>/
.ni { color: #f6f7ee } /</em> Name.Entity <em>/
.ne { color: #f6f7ee } /</em> Name.Exception <em>/
.nf { color: #96e309 } /</em> Name.Function <em>/
.nl { color: #f6f7ee } /</em> Name.Label <em>/
.nn { color: #f6f7ee } /</em> Name.Namespace <em>/
.nx { color: #f6f7ee } /</em> Name.Other <em>/
.py { color: #f6f7ee } /</em> Name.Property <em>/
.nt { color: #f6f7ee } /</em> Name.Tag <em>/
.nv { color: #f6f7ee } /</em> Name.Variable <em>/
.ow { color: #f7005f } /</em> Operator.Word <em>/
.mb { color: #9d60ff } /</em> Literal.Number.Bin <em>/
.mf { color: #9d60ff } /</em> Literal.Number.Float <em>/
.mh { color: #9d60ff } /</em> Literal.Number.Hex <em>/
.mi { color: #9d60ff } /</em> Literal.Number.Integer <em>/
.mo { color: #9d60ff } /</em> Literal.Number.Oct <em>/
.sa { color: #e0d75a } /</em> Literal.String.Affix <em>/
.sb { color: #e0d75a } /</em> Literal.String.Backtick <em>/
.sc { color: #e0d75a } /</em> Literal.String.Char <em>/
.dl { color: #e0d75a } /</em> Literal.String.Delimiter <em>/
.sd { color: #e0d75a } /</em> Literal.String.Doc <em>/
.s2 { color: #e0d75a } /</em> Literal.String.Double <em>/
.se { color: #e0d75a } /</em> Literal.String.Escape <em>/
.sh { color: #e0d75a } /</em> Literal.String.Heredoc <em>/
.si { color: #e0d75a } /</em> Literal.String.Interpol <em>/
.sx { color: #e0d75a } /</em> Literal.String.Other <em>/
.sr { color: #e0d75a } /</em> Literal.String.Regex <em>/
.s1 { color: #e0d75a } /</em> Literal.String.Single <em>/
.ss { color: #e0d75a } /</em> Literal.String.Symbol <em>/
.bp { color: #f6f7ee } /</em> Name.Builtin.Pseudo <em>/
.fm { color: #96e309 } /</em> Name.Function.Magic <em>/
.vc { color: #f6f7ee } /</em> Name.Variable.Class <em>/
.vg { color: #f6f7ee } /</em> Name.Variable.Global <em>/
.vi { color: #f6f7ee } /</em> Name.Variable.Instance <em>/
.vm { color: #f6f7ee } /</em> Name.Variable.Magic <em>/
.il { color: #9d60ff } /</em> Literal.Number.Integer.Long */</p>

<pre><code>&lt;/style&gt;
</code></pre>

<p></head>
<body><nav class="navbar navbar-expand-md navbar-light bg-light"></p>

<pre><code>&lt;a class="navbar-brand" href="#"&gt;navigation test menu title&lt;/a&gt;

&lt;button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"&gt;
    &lt;span class="navbar-toggler-icon"&gt;&lt;/span&gt;
&lt;/button&gt;

&lt;div class="collapse navbar-collapse" id="navbarSupportedContent"&gt;
    &lt;ul class="navbar-nav ml-auto"&gt;
            &lt;li class="nav-item active"&gt;&lt;a class="nav-link" href="HTML file path"&gt;Test Link&lt;/a&gt;&lt;/li&gt;
</code></pre>

<p></ul></div></nav></p>

<p><div class="container" id="body"></p>

<h1>!/usr/bin/env python</h1>

<p>from <strong>future</strong> import absolute<em>import, print</em>function</p>

<p>import os
import time
import string
import pickle
import re
import platform
import subprocess</p>

<p>import gi;  gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
from gi.repository import Gdk
from gi.repository import GLib
from gi.repository import GObject
from gi.repository import Pango</p>

<p>gi.require_version('PangoCairo', '1.0')
from gi.repository import PangoCairo</p>

<p>import  pedconfig
import peddraw
import pedxtnd
import  pedync
import  pedspell
import  pedcolor
import  pedmenu
import  pedundo
import  pedmisc</p>

<p>from pedutil import *
from keywords import *</p>

<p>class pedtask():
    def <strong>init</strong>(self):
        print("Pedtask started", pedtask)</p>

<pre><code># Pass in two lists, one for linux and one for windows
def start_external(self, linprog, winprog):

    #print("start_external", linprog)

    try:
        if platform.system().find("Win") &gt;= 0:
            ret = subprocess.Popen(winprog)
            #if not ret.returncode:
            #    raise OSError
        else:
            ret = subprocess.Popen(linprog)
            #if not ret.returncode:
            #    raise OSError
    except:
        print("Cannot launch %s" % str(linprog), sys.exc_info())
        pedync.message("
   Cannot launch %s 

"  % str(linprog) +
                                 str(sys.exc_info()))

def start_edit(self):

    old = os.getcwd()
    fdir = os.path.dirname(os.path.realpath(__file__))
    #print("fdir:", fdir)
    mydir = os.path.dirname(os.path.join(fdir, "../"))
    #print("mydir:", mydir)
    os.chdir(mydir)
    myscript = os.path.realpath(os.path.join(mydir, 'pyedpro.py'))
    #print("myscript:", myscript)

    ret = 0
    try:
        if platform.system().find("Win") &gt;= 0:
            print("No exe function on windows. (TODO)")
        else:
            # Stumble until editor found
            ret = subprocess.Popen(["python3", myscript])
            if ret.returncode:
                ret = subprocess.Popen(["python", myscript])
                if not ret.returncode:
                    raise OSError
    except:
        print("Cannot launch editor instance", sys.exc_info())
        pedync.message("
   Cannot launch new editor instance 

")

    # Back to original dir
    os.chdir(os.path.dirname(old))

# --------------------------------------------------------------------
def start_mdfilter(self):

    #print("MD Filter called.", os.getcwd())

    yfname = os.path.dirname(__file__) + os.sep + "default.yml"

    print(yfname)

    comline = ["md2html", "-s", yfname, self.fname,]
    try:
        ret = subprocess.Popen(comline, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    except:
        print("Cannot start MD filter %s" % str(comline), sys.exc_info())
        pedync.message("
   Cannot filter %s 

"  % str(comline) +
                   str(sys.exc_info()) )
        return
    try:
        outs, errs = ret.communicate()
    except:
        print("Cannot communicate with MD filter %s" % str(comline), sys.exc_info())
        return

    newfname = os.path.splitext(self.fname)[0] + ".html"
    #print("processed:", self.fname, newfname)

    if not os.path.isfile(newfname):
        print("No conversion on %s" % self.fname)
        pedync.message("
   Cannot convert '%s' 
"
            "   to MD / HTML file

"  % self.fname )
        return

    self.start_htmlwin(newfname)

def start_browser(self, newfname):
    comline2 = ["firefox", newfname,]
    try:
        ret = subprocess.Popen(comline2)
    except:
        print("Cannot start browser %s" % str(comline2), sys.exc_info())
        pedync.message("
   Cannot start %s 

"  % str(comline2) +
                   str(sys.exc_info()) )
        return

def start_htmlwin(self, newfname):
    try:
        xfname = os.path.dirname(__file__) + os.sep + "webwin.py"
        #print("xfname", )
        comline3 = ["python", xfname, newfname,]
        try:
            ret = subprocess.Popen(comline3)
        except:
            print("Cannot start browser %s" % str(comline3), sys.exc_info())
            pedync.message("
   Cannot start %s 

"  % str(comline3) +
                       str(sys.exc_info()) )
            return
    except:
        print("Cannot start HTML Win %s" % str(newfname), sys.exc_info())
        pedync.message("
   Cannot start %s 

"  % str(newfname) +
                   str(sys.exc_info()) )
        return

def start_htmlstr(self):
    try:
        xfname = os.path.dirname(__file__) + os.sep + "webwin.py"

        sumstr = ""
        for bb in self.text:
            sumstr += bb + "
"

        comline3 = ["python", xfname, sumstr, ]
        try:
            ret = subprocess.Popen(comline3)
        except:
            print("Cannot start browser %s" % str(comline3), sys.exc_info())
            pedync.message("
   Cannot start %s 

"  % str(comline3) +
                       str(sys.exc_info()) )
            return
    except:
        print("Cannot start HTML Win %s" % str(newfname), sys.exc_info())
        pedync.message("
   Cannot start %s 

"  % str(newfname) +
                   str(sys.exc_info()) )
        return

def start_m4filter(self):

    #print("Filter called.")
    self.save()
    comline = ["m4", self.fname,]
    try:
        ret = subprocess.Popen(comline, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    except:
        print("Cannot filter %s" % str(comline), sys.exc_info())
        pedync.message("
   Cannot filter %s 

"  % str(comline) +
                   str(sys.exc_info()) )
        return
    try:
        outs, errs = ret.communicate()
    except:
        print("Cannot communicate with filter %s" % str(comline), sys.exc_info())
        return

    res = outs.decode("cp437")
    #print("res", res)

    www = self.mained.get_width()
    if self.mained.hpaned3.get_position() &gt; www - 20:
        self.mained.hpaned3.set_position(www - www / 4)
        self.mained.update_statusbar("Filter output active")

    newfname = os.path.splitext(self.fname)[0] + ".html"

    pppp = self.notebook3.get_nth_page(0)
    self.notebook3.set_tab_label(pppp,
                self.mained.make_label("Filter on M4 '" +
                         os.path.basename(newfname) + "'"))
    arrx = res.split("
")
    self.mained.diffpane.area.loadbuff(arrx)
    self.mained.diffpane.area.fname = newfname
    self.mained.update_statusbar("M4 filter output activated.")
    self.start_htmlwin(res)
</code></pre>

<h1>EOF</h1>

<p></div></body>
</html></p>

</div></body>
</html>
